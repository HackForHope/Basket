/*
 * CAUTION: this control depends on controls/fixed_table/ice_fixed_table.jsx
 * and ice_fixed_table.jsx is just a fast hack over this control http://facebook.github.io/fixed-data-table/
 * i did it for reactmap example
 * it is not production ready
 */
import React, {PropTypes, Component} from 'react/addons';
import controllable from 'react-controllables';
import shouldPureComponentUpdate from 'react-pure-render/function';

import IceFixedTable from 'components/controls/fixed_table/ice_fixed_table.jsx';


@controllable(['forceUpdateCounter', 'startRow', 'hoveredRowIndex'])
export default class IceTableInt extends Component {

  static propTypes = {
    // public
    columnDefs: PropTypes.any.isRequired,
    cellRenderer: PropTypes.func,
    getRowObjectAt: PropTypes.func,
    getRowClassNameAt: PropTypes.func,
    renderHeader: PropTypes.func,
    renderMiniHeader: PropTypes.func,
    headerHeight: PropTypes.number,
    miniHeaderHeight: PropTypes.number,
    rowHeight: PropTypes.number,
    rowsCount: PropTypes.number,
    hoveredRowIndex: PropTypes.number,
    onHoveredRowIndexChange: PropTypes.func, // generated by @controllable
    onVisibleRowsChange: PropTypes.func,
    onRowClick: PropTypes.func,
    resetToStartObj: PropTypes.any, // move table 2 start position if changed

    // private
    forceUpdateCounter: PropTypes.number.isRequired,
    onForceUpdateCounterChange: PropTypes.func, // generated by @controllable
    startRow: React.PropTypes.oneOfType([PropTypes.number, PropTypes.any]), // just a helper
    onStartRowChange: PropTypes.func // generated by @controllable
  }

  static defaultProps = {
    forceUpdateCounter: 0,
    startRow: null,

    hoveredRowIndex: -1,
    hoveredMapRowIndex: -1,
    firstInvisibleRowIndex: -1,
    resetToStartObj: {}
  }

  shouldComponentUpdate = shouldPureComponentUpdate;

  constructor(props) {
    super(props);
  }


  _cellRenderer = (cellDataKey, rowData, rowIndex) => {
    return this.props.cellRenderer(cellDataKey, rowData, rowIndex);
  }

  _getRowObjectAt = (i) => {
    return this.props.getRowObjectAt(i);
  }

  _getRowClassNameAt = (i) => {
    return this.props.getRowClassNameAt(i, i === this.props.hoveredRowIndex);
  }

  _renderHeader = () => {
    return this.props.renderHeader(this._resetTableToStartRow);
  }

  _renderMiniHeader = () => {
    return this.props.renderMiniHeader(this._resetTableToStartRow);
  }

  _onVisibleRowsChange = (visibleRowFirst, visibleRowLast, maxVisibleRows) => {
    if (this.props.onVisibleRowsChange) {
      this.props.onVisibleRowsChange({visibleRowFirst, visibleRowLast, maxVisibleRows});
    }
  }

  _onRowMouseEnter = (index) => {
    this.props.onHoveredRowIndexChange(index);
  }

  _onRowMouseLeave = (/* index */) => {
    this.props.onHoveredRowIndexChange(-1);
  }


  _onShowFiltersClick = () => {
    this._resetTableToStartRow();
  }

  _resetTableToStartRow = () => {
    if (this.props.onStartRowChange) {
      this.props.onStartRowChange(0); // отмотать на 0 роу (потом подправить код таблички чтоб правильно мотала на любые роу - там косяк с офсетом изза хедера)
    }
  }

  _updateTableView = () => {
    if (this.props.onForceUpdateCounterChange) {
      this.props.onForceUpdateCounterChange(this.props.forceUpdateCounter + 1);
    }
  }

  _onRowClick = (index, rowData) => {
    if (this.props.onRowClick) {
      this.props.onRowClick(index, rowData);
    }
  }

  componentWillReceiveProps(nextProps) {
    if (this.props.forceUpdateCounter === nextProps.forceUpdateCounter) {
      this._updateTableView();
    }

    // if object changed reset table to start position
    if (this.props.resetToStartObj !== nextProps.resetToStartObj) {
      this._resetTableToStartRow();
    }
  }

  componentDidUpdate(/* prevProps */) {
    if (this.props.startRow !== null) {
      if (this.props.onStartRowChange) {
        this.props.onStartRowChange(null); // we need to reset startRow after rendering complete so after we can reset to same row
      }
    }
  }

  render() {
    return (
      <IceFixedTable
        onVisibleRowsChange={this._onVisibleRowsChange}
        onRowMouseEnter={this._onRowMouseEnter}
        onRowMouseLeave={this._onRowMouseLeave}
        onRowClick={this._onRowClick}
        forceUpdateCounter={this.props.forceUpdateCounter} // прокинуто везде где надо перерисовать данные
        columns = {this.props.columnDefs}
        cellRenderer = {this._cellRenderer}
        getRowObjectAt = {this._getRowObjectAt}
        getRowClassNameAt={this._getRowClassNameAt}
        rowsCount = {this.props.rowsCount}
        headerHeight = {this.props.headerHeight}
        miniHeaderHeight = {this.props.miniHeaderHeight}
        startRow = {this.props.startRow} // row resetter
        rowHeight = {this.props.rowHeight}
        miniHeaderRenderer = {this._renderMiniHeader}
        headerRenderer = {this._renderHeader} />
    );
  }
}
